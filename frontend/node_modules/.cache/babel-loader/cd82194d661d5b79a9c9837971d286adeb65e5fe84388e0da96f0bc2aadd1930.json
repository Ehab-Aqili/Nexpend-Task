{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Orange\\\\Desktop\\\\Nixpend\\\\frontend\\\\src\\\\components\\\\NavBar\\\\NavBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./NavBar.css\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport AddCardPopup from \"./AddCardPopup\"; // Import your AddCardPopup component here\nimport PopupCard from \"./PopupCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NavBar = ({\n  columns,\n  onAddCard\n}) => {\n  _s();\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const handleAddCard = (title, description, subtasks, status) => {\n    onAddCard({\n      title,\n      description,\n      subtasks,\n      status\n    });\n    setIsPopupOpen(false); // Close the popup after submitting\n  };\n\n  return /*#__PURE__*/_jsxDEV(NavLink, {\n    className: \"navbar bg-body-tertiary \",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"navbar-brand\",\n        to: \"/\",\n        children: \"Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-success me-2\",\n        type: \"button\",\n        onClick: () => setIsPopupOpen(true),\n        children: \"Add Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PopupCard, {\n        isOpen: isPopupOpen,\n        onClose: () => setIsPopupOpen(false),\n        onSubmit: handleAddCard,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(NavBar, \"vFErrUU1qYQoaBmFpaEBY5pk8jE=\");\n_c = NavBar;\nexport default NavBar;\nvar _c;\n$RefreshReg$(_c, \"NavBar\");","map":{"version":3,"names":["React","useState","Link","NavLink","AddCardPopup","PopupCard","jsxDEV","_jsxDEV","NavBar","columns","onAddCard","_s","isPopupOpen","setIsPopupOpen","handleAddCard","title","description","subtasks","status","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","isOpen","onClose","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/Orange/Desktop/Nixpend/frontend/src/components/NavBar/NavBar.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./NavBar.css\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport AddCardPopup from \"./AddCardPopup\"; // Import your AddCardPopup component here\r\nimport PopupCard from \"./PopupCard\";\r\n\r\nconst NavBar = ({ columns, onAddCard }) => {\r\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\r\n\r\n  const handleAddCard = (title, description, subtasks, status) => {\r\n    onAddCard({ title, description, subtasks, status });\r\n    setIsPopupOpen(false); // Close the popup after submitting\r\n  };\r\n\r\n  return (\r\n    <NavLink className=\"navbar bg-body-tertiary \">\r\n      <div className=\"container\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          Board\r\n        </Link>\r\n        <button\r\n          className=\"btn btn-outline-success me-2\"\r\n          type=\"button\"\r\n          onClick={() => setIsPopupOpen(true)}\r\n        >\r\n          Add Card\r\n        </button>\r\n        <PopupCard\r\n          isOpen={isPopupOpen}\r\n          onClose={() => setIsPopupOpen(false)}\r\n          onSubmit={handleAddCard}\r\n          columns={columns}\r\n        />\r\n      </div>\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,cAAc;AACrB,SAASC,IAAI,EAAEC,OAAO,QAAQ,kBAAkB;AAChD,OAAOC,YAAY,MAAM,gBAAgB,CAAC,CAAC;AAC3C,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,MAAM,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMa,aAAa,GAAGA,CAACC,KAAK,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,MAAM,KAAK;IAC9DR,SAAS,CAAC;MAAEK,KAAK;MAAEC,WAAW;MAAEC,QAAQ;MAAEC;IAAO,CAAC,CAAC;IACnDL,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;EACzB,CAAC;;EAED,oBACEN,OAAA,CAACJ,OAAO;IAACgB,SAAS,EAAC,0BAA0B;IAAAC,QAAA,eAC3Cb,OAAA;MAAKY,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBb,OAAA,CAACL,IAAI;QAACiB,SAAS,EAAC,cAAc;QAACE,EAAE,EAAC,GAAG;QAAAD,QAAA,EAAC;MAEtC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACPlB,OAAA;QACEY,SAAS,EAAC,8BAA8B;QACxCO,IAAI,EAAC,QAAQ;QACbC,OAAO,EAAEA,CAAA,KAAMd,cAAc,CAAC,IAAI,CAAE;QAAAO,QAAA,EACrC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTlB,OAAA,CAACF,SAAS;QACRuB,MAAM,EAAEhB,WAAY;QACpBiB,OAAO,EAAEA,CAAA,KAAMhB,cAAc,CAAC,KAAK,CAAE;QACrCiB,QAAQ,EAAEhB,aAAc;QACxBL,OAAO,EAAEA;MAAQ;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEd,CAAC;AAACd,EAAA,CA9BIH,MAAM;AAAAuB,EAAA,GAANvB,MAAM;AAgCZ,eAAeA,MAAM;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}